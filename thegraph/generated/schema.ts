// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PrivateMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PrivateMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PrivateMessage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PrivateMessage", id.toString(), this);
    }
  }

  static load(id: string): PrivateMessage | null {
    return changetype<PrivateMessage | null>(store.get("PrivateMessage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromUser(): string {
    let value = this.get("fromUser");
    return value!.toString();
  }

  set fromUser(value: string) {
    this.set("fromUser", Value.fromString(value));
  }

  get toUser(): string {
    let value = this.get("toUser");
    return value!.toString();
  }

  set toUser(value: string) {
    this.set("toUser", Value.fromString(value));
  }

  get fromAddress(): string {
    let value = this.get("fromAddress");
    return value!.toString();
  }

  set fromAddress(value: string) {
    this.set("fromAddress", Value.fromString(value));
  }

  get toAddress(): string {
    let value = this.get("toAddress");
    return value!.toString();
  }

  set toAddress(value: string) {
    this.set("toAddress", Value.fromString(value));
  }

  get text(): string {
    let value = this.get("text");
    return value!.toString();
  }

  set text(value: string) {
    this.set("text", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get isSpam(): boolean {
    let value = this.get("isSpam");
    return value!.toBoolean();
  }

  set isSpam(value: boolean) {
    this.set("isSpam", Value.fromBoolean(value));
  }

  get isRemoved(): boolean {
    let value = this.get("isRemoved");
    return value!.toBoolean();
  }

  set isRemoved(value: boolean) {
    this.set("isRemoved", Value.fromBoolean(value));
  }

  get isProtected(): boolean {
    let value = this.get("isProtected");
    return value!.toBoolean();
  }

  set isProtected(value: boolean) {
    this.set("isProtected", Value.fromBoolean(value));
  }
}

export class RoomMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RoomMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RoomMessage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RoomMessage", id.toString(), this);
    }
  }

  static load(id: string): RoomMessage | null {
    return changetype<RoomMessage | null>(store.get("RoomMessage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromUser(): string {
    let value = this.get("fromUser");
    return value!.toString();
  }

  set fromUser(value: string) {
    this.set("fromUser", Value.fromString(value));
  }

  get fromAddress(): string {
    let value = this.get("fromAddress");
    return value!.toString();
  }

  set fromAddress(value: string) {
    this.set("fromAddress", Value.fromString(value));
  }

  get replyForAddress(): string {
    let value = this.get("replyForAddress");
    return value!.toString();
  }

  set replyForAddress(value: string) {
    this.set("replyForAddress", Value.fromString(value));
  }

  get toRoom(): i32 {
    let value = this.get("toRoom");
    return value!.toI32();
  }

  set toRoom(value: i32) {
    this.set("toRoom", Value.fromI32(value));
  }

  get text(): string {
    let value = this.get("text");
    return value!.toString();
  }

  set text(value: string) {
    this.set("text", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get isSpam(): boolean {
    let value = this.get("isSpam");
    return value!.toBoolean();
  }

  set isSpam(value: boolean) {
    this.set("isSpam", Value.fromBoolean(value));
  }

  get isRemoved(): boolean {
    let value = this.get("isRemoved");
    return value!.toBoolean();
  }

  set isRemoved(value: boolean) {
    this.set("isRemoved", Value.fromBoolean(value));
  }

  get isProtected(): boolean {
    let value = this.get("isProtected");
    return value!.toBoolean();
  }

  set isProtected(value: boolean) {
    this.set("isProtected", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get incomePrivate(): Array<string> {
    let value = this.get("incomePrivate");
    return value!.toStringArray();
  }

  set incomePrivate(value: Array<string>) {
    this.set("incomePrivate", Value.fromStringArray(value));
  }

  get outcomePrivate(): Array<string> {
    let value = this.get("outcomePrivate");
    return value!.toStringArray();
  }

  set outcomePrivate(value: Array<string>) {
    this.set("outcomePrivate", Value.fromStringArray(value));
  }

  get outcomeRoom(): Array<string> {
    let value = this.get("outcomeRoom");
    return value!.toStringArray();
  }

  set outcomeRoom(value: Array<string>) {
    this.set("outcomeRoom", Value.fromStringArray(value));
  }
}
