// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PrivateChat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PrivateChat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PrivateChat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PrivateChat", id.toString(), this);
    }
  }

  static load(id: string): PrivateChat | null {
    return changetype<PrivateChat | null>(store.get("PrivateChat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get last_message(): string {
    let value = this.get("last_message");
    return value!.toString();
  }

  set last_message(value: string) {
    this.set("last_message", Value.fromString(value));
  }

  get is_removed(): boolean {
    let value = this.get("is_removed");
    return value!.toBoolean();
  }

  set is_removed(value: boolean) {
    this.set("is_removed", Value.fromBoolean(value));
  }

  get updated_at(): i32 {
    let value = this.get("updated_at");
    return value!.toI32();
  }

  set updated_at(value: i32) {
    this.set("updated_at", Value.fromI32(value));
  }

  get total_messages(): i32 {
    let value = this.get("total_messages");
    return value!.toI32();
  }

  set total_messages(value: i32) {
    this.set("total_messages", Value.fromI32(value));
  }
}

export class PrivateMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PrivateMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PrivateMessage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PrivateMessage", id.toString(), this);
    }
  }

  static load(id: string): PrivateMessage | null {
    return changetype<PrivateMessage | null>(store.get("PrivateMessage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get id_num(): i32 {
    let value = this.get("id_num");
    return value!.toI32();
  }

  set id_num(value: i32) {
    this.set("id_num", Value.fromI32(value));
  }

  get inner_id(): string {
    let value = this.get("inner_id");
    return value!.toString();
  }

  set inner_id(value: string) {
    this.set("inner_id", Value.fromString(value));
  }

  get chat_id(): string {
    let value = this.get("chat_id");
    return value!.toString();
  }

  set chat_id(value: string) {
    this.set("chat_id", Value.fromString(value));
  }

  get from_address(): string {
    let value = this.get("from_address");
    return value!.toString();
  }

  set from_address(value: string) {
    this.set("from_address", Value.fromString(value));
  }

  get to_address(): string {
    let value = this.get("to_address");
    return value!.toString();
  }

  set to_address(value: string) {
    this.set("to_address", Value.fromString(value));
  }

  get encrypt_key(): string {
    let value = this.get("encrypt_key");
    return value!.toString();
  }

  set encrypt_key(value: string) {
    this.set("encrypt_key", Value.fromString(value));
  }

  get reply_message(): string | null {
    let value = this.get("reply_message");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reply_message(value: string | null) {
    if (!value) {
      this.unset("reply_message");
    } else {
      this.set("reply_message", Value.fromString(<string>value));
    }
  }

  get text(): string {
    let value = this.get("text");
    return value!.toString();
  }

  set text(value: string) {
    this.set("text", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get created_at(): i32 {
    let value = this.get("created_at");
    return value!.toI32();
  }

  set created_at(value: i32) {
    this.set("created_at", Value.fromI32(value));
  }

  get tx_hash(): string {
    let value = this.get("tx_hash");
    return value!.toString();
  }

  set tx_hash(value: string) {
    this.set("tx_hash", Value.fromString(value));
  }

  get is_spam(): boolean {
    let value = this.get("is_spam");
    return value!.toBoolean();
  }

  set is_spam(value: boolean) {
    this.set("is_spam", Value.fromBoolean(value));
  }

  get is_removed(): boolean {
    let value = this.get("is_removed");
    return value!.toBoolean();
  }

  set is_removed(value: boolean) {
    this.set("is_removed", Value.fromBoolean(value));
  }
}

export class GroupChat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GroupChat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GroupChat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GroupChat", id.toString(), this);
    }
  }

  static load(id: string): GroupChat | null {
    return changetype<GroupChat | null>(store.get("GroupChat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get last_message(): string {
    let value = this.get("last_message");
    return value!.toString();
  }

  set last_message(value: string) {
    this.set("last_message", Value.fromString(value));
  }

  get is_removed(): boolean {
    let value = this.get("is_removed");
    return value!.toBoolean();
  }

  set is_removed(value: boolean) {
    this.set("is_removed", Value.fromBoolean(value));
  }

  get updated_at(): i32 {
    let value = this.get("updated_at");
    return value!.toI32();
  }

  set updated_at(value: i32) {
    this.set("updated_at", Value.fromI32(value));
  }

  get total_messages(): i32 {
    let value = this.get("total_messages");
    return value!.toI32();
  }

  set total_messages(value: i32) {
    this.set("total_messages", Value.fromI32(value));
  }
}

export class GroupMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GroupMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GroupMessage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GroupMessage", id.toString(), this);
    }
  }

  static load(id: string): GroupMessage | null {
    return changetype<GroupMessage | null>(store.get("GroupMessage", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inner_id(): string {
    let value = this.get("inner_id");
    return value!.toString();
  }

  set inner_id(value: string) {
    this.set("inner_id", Value.fromString(value));
  }

  get id_num(): i32 {
    let value = this.get("id_num");
    return value!.toI32();
  }

  set id_num(value: i32) {
    this.set("id_num", Value.fromI32(value));
  }

  get from_address(): string {
    let value = this.get("from_address");
    return value!.toString();
  }

  set from_address(value: string) {
    this.set("from_address", Value.fromString(value));
  }

  get reply_message(): string | null {
    let value = this.get("reply_message");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reply_message(value: string | null) {
    if (!value) {
      this.unset("reply_message");
    } else {
      this.set("reply_message", Value.fromString(<string>value));
    }
  }

  get group_id(): string {
    let value = this.get("group_id");
    return value!.toString();
  }

  set group_id(value: string) {
    this.set("group_id", Value.fromString(value));
  }

  get text(): string {
    let value = this.get("text");
    return value!.toString();
  }

  set text(value: string) {
    this.set("text", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get created_at(): i32 {
    let value = this.get("created_at");
    return value!.toI32();
  }

  set created_at(value: i32) {
    this.set("created_at", Value.fromI32(value));
  }

  get tx_hash(): string {
    let value = this.get("tx_hash");
    return value!.toString();
  }

  set tx_hash(value: string) {
    this.set("tx_hash", Value.fromString(value));
  }

  get is_spam(): boolean {
    let value = this.get("is_spam");
    return value!.toBoolean();
  }

  set is_spam(value: boolean) {
    this.set("is_spam", Value.fromBoolean(value));
  }

  get is_removed(): boolean {
    let value = this.get("is_removed");
    return value!.toBoolean();
  }

  set is_removed(value: boolean) {
    this.set("is_removed", Value.fromBoolean(value));
  }
}
